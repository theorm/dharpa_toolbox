# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/03_data_targets.ipynb (unless otherwise specified).

__all__ = ['DataTarget', 'WidgetTarget', 'FileContentWidget']

# Cell

from abc import ABCMeta, abstractmethod
from typing import Any
from ipywidgets import Widget, Output
from traitlets import HasTraits, All
from ..modules.core import DharpaModule


class DataTarget(metaclass=ABCMeta):

    def __init__(self, module: DharpaModule):

        self._connect_outputs(module.outputs)

    @abstractmethod
    def _connect_outputs(self, outputs: HasTraits) -> Any:
        pass

class WidgetTarget(DataTarget):

    def __init__(self, module: DharpaModule):

        self._widget: Widget = None
        super().__init__(module)

    def _connect_outputs(self, outputs: HasTraits) -> None:

        self._widget = self._create_output_widget(outputs)

    @abstractmethod
    def _create_output_widget(self) -> Widget:
        pass


class FileContentWidget(WidgetTarget):

    def _create_output_widget(self, outputs: HasTraits) -> Widget:

        print("Creating output widget")

        output = Output()

        def output_value_changed(change):

            output.clear_output()

            with output:
                print("XXXXXXXXXXXXXX")
                print(change.new)


        outputs.observe(output_value_changed, names=All)
        return output

