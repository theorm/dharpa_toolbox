# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/10_module_subclasses.ipynb (unless otherwise specified).

__all__ = ['DharpaFile', 'DharpaFiles', 'FilesCollectionModule', 'TextPreprocessModule']

# Cell

# export
import collections

import typing
import traitlets
from traitlets import HasTraits, Dict, Any, Unicode, Integer, Bytes
from .core import DharpaModule, ModuleInputValues, ModuleOutputValues

class DharpaFile(HasTraits):

    @classmethod
    def create(self, data):

        print("--")
        print(data)

        if isinstance(data, str):
            raise NotImplementedError()

        if not isinstance(data, collections.abc.Mapping) and isinstance(data, collections.abc.Iterable) and len(data) == 1:
            data = list(data)[0]

        if isinstance(data, collections.abc.Mapping):

            if len(data) == 1:
                value = next(iter(data.values()))

                if isinstance(value, collections.abc.Mapping) and isinstance(value.get("metadata", None), collections.abc.Mapping) and isinstance(value.get("content", None), bytes):
                    # means uploaded file from FileUpload widget
                    # TODO: maybe check file name just to be sure
                    data = value

            if "metadata" in data.keys() and "content" in data.keys():
                name = data["metadata"]["name"]
                size = data["metadata"]["size"]
                f_type = data["metadata"].get("type", None)
                last_modified = data["metadata"]["lastModified"]
            else:
                raise ValueError(f"Can't parse dict to file object: {data}")
        else:
            raise TypeError(f"Can't create file object: invalid input type '{type(data)}'")

        f = DharpaFile(name=name, size=size, type=f_type, last_modified=last_modified)
        return f

    name = Unicode()
    type = Unicode(allow_none=True)
    size = Integer()
    last_modified = Integer(allow_none=True)
    content = Bytes()


class DharpaFiles(object):

    @classmethod
    def create(self, data) -> typing.List["DharpaFile"]:

        result = []

        if not data:
            raise ValueError("No data provided for file object.")

        if isinstance(data, str):
            raise NotImplementedError()
        if isinstance(data, collections.abc.Mapping):
            first_key = next(iter(data.keys()))
            if isinstance(first_key, str) and isinstance(data[first_key], collections.abc.Mapping) and isinstance(data[first_key].get("metadata", None), collections.abc.Mapping) and isinstance(data[first_key].get("content", None), bytes):

                for v in data.values():
                    f = DharpaFile.create(v)
                    result.append(f)
            else:
                f = DharpaFile.create(data)
                result.append(f)

        elif isinstance(data, collections.abc.Iterable):
            for d in data:
                f = DharpaFile.create(d)
                result.append(f)

        return DharpaFiles(*result)

    def __init__(self, *files: DharpaFile):

        self._files: typing.Iterable[DharpaFile] = files


class FilesCollectionModule(DharpaModule):

    _module_name = "files_collection"


    def _create_inputs(self, **config) -> ModuleInputValues:

        class FilesCollectionValueInput(ModuleInputValues):
            files = traitlets.Any()

        return FilesCollectionValueInput()

    def _create_outputs(self, **config) -> ModuleOutputValues:

        class FilesCollectionValueOutput(ModuleOutputValues):
            file_set = traitlets.Instance(klass=DharpaFiles, allow_none=True)

        return FilesCollectionValueOutput()

    def _process(self, files):

        print("----")

        print(files)

        d_files = DharpaFiles.create(files)

        print(d_files)

        return {"files": d_files}


class TextPreprocessModule(DharpaModule):

    _module_name = "text_preprocess_options"

    def _create_inputs(self, **config) -> ModuleInputValues:

        pass